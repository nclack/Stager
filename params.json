{"name":"Stager","tagline":"Image Registration and Analysis Interface","body":"## Image Registration and Analysis Interface ‘Stager’\r\n\r\n![](https://raw.githubusercontent.com/arunesh-mittal/StagerWebpage/master/Screen%20Shot%202015-06-23%20at%208.01.52%20PM.png)\r\n\r\n###Features:\r\n\r\n####ROI Selection \r\n\r\nAllow the user to select an algorithm for ROI mask/map creation OR use a pre-computed ROI mask/map. In the future, support field-of-view search feature i.e. if the user selects a recorded volume, move scanner to find optimal alignment between pre-recorded volume and live acquisition.\r\n\r\n####Image Registration\r\n\r\nGiven a reference volume perform allow user to choose a image registration algorithm (2D FFT cross correlation) and save the registered data either in the standard tiff format OR in a flat binary format (uint16) - one volume per file, one trials worth of files per directory with a standard naming of the files and directories. Add functionality to set the locations of these files to be on the cluster. In the future, other ways of sending the data to the network should be explored too. Performance Requirement: 8 Hz for 4 planes, 30 Hz for 1 plane.\r\n\r\nFuture work: Possibly allow user to specify or add registration algorithms. \r\n\r\n####ROI/Map\r\n\r\nROIs can be given in two forms, either a binary ROI mask or a weighted Map. Given a set of ROIs (either binary or weighted) compute the inner product of each ROI with the current frame (either with or without motion registration). Performance Requirement: (8 Hz for 4 planes, 30 Hz for 1 plane)\r\n\r\n####Time-series display\r\n\r\nFollowing the inner product with the ROI, plot the time series. The GUI should allow users to specify which ROIs to plot. User should also be able to specify threshold for each ROI and trigger and event if an event is detected. \r\n\r\n####Analog Output/Digital Output\r\n\r\nThe time series data should be scaled and output on AO channels from one of the NI boards (scaled ±10V or 0-5V). The user should be able so specify which ROIs to send to the Analog output. In addition, they should allow the setting of thresholds to do simple event detection and output pulses on DIO lines for detected events.\r\n\r\n***\r\n\r\n###Implementation\r\n\r\n####Architecture:\r\n\r\nStager is based on a client/server architecture. Stager has a server which listens to clients and imports frames into Stager when the client marks the frame as ready. The client class must me initialized by any MATLAB routine which wants to send frames to the Stager. Stager itself is based on a object-oriented design - I believe this will allow for a lot of flexibility later with things like unit testing and modularity. \r\n\r\nStager currently has a routine that invokes SI5 to acquire n-Frames or uses a pre-acquired tif stack to generate a template image using Nick's pyramid scheme. As a new frame comes in, it is processed and added to the correct frameObject array within the appropriate timeSeriesObject by the Stager. The processing step currently includes the 2DFFT (x-correlation) registration. This takes~23ms+/-2ms - Note: this is on my windows virtual machine on a mac, I would expect the numbers to be much better on any SI rig machine based on FFT benchmarks I performed. \r\n\r\n\r\n####Pipeline\r\n\r\nThe stager runs in its own process i.e. scanImage and the analysis run as two separate processes (two different matlab sessions) - this allows for much better performance and avoids dropped frames on the SI5 process. Since, I have modeled the architecture as a server/client design, any service that wants to use the \"Stager\" must initialize an instance of the Stager client class. In the case of SI5, ScanImage starts a client session in a userfunction, the client maps each new incoming frame from the scanImage buffer into memory (memory mapped file) and sets a byte value - read flag. The stager server checks the flag and pulls the memory mapped frame, processes it and adds it to a timeSeries object as a frameObject. The client/server relationship between SI5 and Stager supports some low level communication, io flags, header info (channel, frameNum, zPlane) and also allows Stager to invoke some pre-defined SI functions. For example, to generate a new template image before starting acquisition, Stager can invoke the grab function in SI5 and acquire n-Frames to generate a new template image.This does not compromise The mapping of each frame and only takes ~1ms +/-3ms (again this is on my windows virtual machine on a mac). Here is a script that outlines some functionality - some of this will eventually be abstracted away in a GUI and higher level functions.\r\n\r\n***\r\n###Comments/Feedback\r\n\r\n####Comments:\r\n\r\nNS: For each ROI might want to be able to set F0 value too and then toggle between looking at F and (F-F0)/F0. Thresholds and events will probably want to be defined in the (F-F0)/F0 domain.\r\n\r\nIt would be useful to flesh out in more detail exactly what the GUI will look like in the first instance (and how you might then want to expand it in the future). For example, how will you display or not display the static reference images, ROI mask / values. How will the user be able to set which ROIs to look at live and which ROIs to send to the AO, how will thresholds be set, how will F0 be set if we want to do an (F-F0)/F0 conversion.\r\n\r\nIt would also be useful to start laying out how you plan to do this under the hood – i.e. will this run in a separate matlab, what will happen if the registration takes too long (will it drop / skip frames, will the acquisition crash, will we be warned), what sort of timing guarantees will there be.\r\n\r\nSP: you should add a neuropil capability; this will be important in many preparations.  It also introduces some problems -- the mask itself is easy, as it is an annulus that is between a range of distances away from the neuron border, but you have to exclude i) other selected ROIs and ii) pixels that are cells/big dendrites but are not part of an ROI.  ii) is tricky -- the way it is done now is that an image with peak correlation for each pixel to its 8 neighbors is computed, and any pixel where this exceeds (e.g.) 0.2 is excluded.  This is predicated on some activity being sampled, and its unclear how much activity is needed to establish this.  Its also quite processing intensive, and goes to Nick’s point about buffering data...\r\n\r\n1. Delta F/F should be user defined - plot histogram for each ROI and allow\r\n2. User to pick threshold (example: 10% of values below threshold)\r\n3. One template for both channels - allow user to pick the channel\r\n4. Allow user to input external ROI (Use codeneuro data fromat)\r\n5. Allow user to input external template (binary/JSON pair)\r\n6. Trial info should be in the memfile header\r\n7. Only keep track of last n frames\r\n8. Explicit error message when frame is dropped\r\n9. Fill dropped data with NaN/Zero\r\n10. AO Daq - use NI DAQ board? Given 30Hz output might be overkill\r\n11. For each time series data structure what happens when n->large N\r\n12. Allow option for FFT on downsampled image for faster registration\r\n13. Named Pipes/POSIX\r\n\r\n\r\n####Requested Features\r\n\r\n1. Save the post-registered images online to a network location (for use for instance by Thunder)\r\n2. Knobs to change contrast and colors in Stager with capability to overlay a currently acquired image and a saved one. \r\n3. Running average of x frames (to smooth and to capture sparse neurons).\r\n4. Robust and efficient calculation of F0 \r\n5. A way to select from the ROI list which ROIs go to the NI output\r\n6. A mode to downsample and reduce the refresh rate for the ROI activity display (to improve the latency)\r\n7. User function that takes ROIs dF/F, extra parameters (weight matrix, etc) and sends the output to the NI \r\n8. A cross-bar to indicate the X-Y and Z offsets with respect to the reference image.\r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}